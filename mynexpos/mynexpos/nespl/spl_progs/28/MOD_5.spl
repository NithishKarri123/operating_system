//SCHEDULER MODULE 
// print "MOD5";


//INFO of OLD PROCESS STORED IN PROCESS TABLE
alias currentPID R1;
currentPID = [SYSTEM_STATUS_TABLE+ 5*CORE + 1];

alias process_table_entry R2;
process_table_entry = PROCESS_TABLE + currentPID * 16;

alias new_process_table R3;

multipush(BP);

//KPTR
[process_table_entry + 12] = SP % 512;

//Check PCB in expos DOC for more info
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


//Stage28
//Acquire Shed Lock
multipush(R1,R2,R3);
R1 = 2;
call ACCESS_CONTROL;
multipop(R1,R2,R3);


alias newPID R4;



//Primary
if ( CORE == 0 )then

    //Stage 27 modifications



    newPID = -1;
    //If logout status is set and secondary core not on IDLE2 then IDLE 
    

    if ( [SYSTEM_STATUS_TABLE + 5] != 0 )then
        if ( [PROCESS_TABLE + 16*15 + 4] == WAIT_DISK )then
            newPID = 0;
            //idle scheduled as paging is ongoing and swapper is blocked
        else
            newPID = 15;
            //paging needed so swapper scheduled
        endif;
    else
        alias ind R5;
        ind = ((currentPID + 1) % 14);

        while( 1==1 )do
            if ( ([PROCESS_TABLE + ind* 16 + 6] == 0) && ([PROCESS_TABLE + ind* 16 + 4]==CREATED ||  [PROCESS_TABLE + ind* 16 + 4]==READY) && ind != [SYSTEM_STATUS_TABLE + 6] )then
                if (ind != 14 && ind != 0 && ind != 15)then
                    break;
                endif;
            endif;
            if (ind == currentPID)then
                break;
            endif;
            ind = ((ind + 1) % 14);
        endwhile;

        newPID = ind;
    endif;
    

    if ( [SYSTEM_STATUS_TABLE + 7] == 1 && [SYSTEM_STATUS_TABLE + 6] != 14)then
        newPID = 0;
    endif;
    

    if (newPID == currentPID)then
        newPID = 0;
    endif;


    // print "P";
    // print newPID;
    
endif;




//Secondary
if ( CORE == 1 )then
    
    
    //Stage 27 modifications



    newPID = -1;
    if ( [SYSTEM_STATUS_TABLE + 5] != 0 || [SYSTEM_STATUS_TABLE + 7] == 1)then
        newPID = 14;
    else

        alias ind R5;
        ind = ((currentPID + 1) % 15);

        while( 1==1 )do
            if ( ([PROCESS_TABLE + ind* 16 + 6] == 0) && ([PROCESS_TABLE + ind* 16 + 4]==CREATED ||  [PROCESS_TABLE + ind* 16 + 4]==READY ||  [PROCESS_TABLE + ind* 16 + 4]==RUNNING ) && ind > 2 && ind != [SYSTEM_STATUS_TABLE + 1])then
                break;
            endif;
            if (ind == currentPID)then
                break;
            endif;
            ind = ((ind + 1) % 15);
        endwhile;

        newPID = ind;
    endif;

    if (newPID == currentPID)then
        newPID = 14;
    endif;

    // print "S";
    // print newPID;
    // if (newPID ==4)then
    //     breakpoint;
    // endif;
    

endif;


//Current executing PID
[SYSTEM_STATUS_TABLE + 5*CORE + 1] = newPID;

new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
//MODE FLAG
[new_process_table + 9] = 0;

if([new_process_table + 4] == CREATED) then
    //STATE
    [new_process_table + 4] = RUNNING;
    

    //In case of error try multipop BP
    BP = [[new_process_table + 11] * 512 ];

    //Release Sched Lock
    multipush(R1,R2,R3,R4,R5);
    R1 = 4;
    R2 = SCHED_LOCK;
    call ACCESS_CONTROL;
    multipop(R1,R2,R3,R4,R5);


    
    //UPTR restored to Stack Pointer
    SP = [new_process_table + 13];
    ireturn;
endif;

[new_process_table + 4] = RUNNING;

//Release Sched Lock
multipush(R1,R2,R3,R4,R5);
R1 = 4;
R2 = SCHED_LOCK;
call ACCESS_CONTROL;
multipop(R1,R2,R3,R4,R5);

SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;

multipop(BP);

return;



