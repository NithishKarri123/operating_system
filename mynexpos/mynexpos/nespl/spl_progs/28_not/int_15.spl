// Shutdown System Call (INT 15) (System Call Number 21)

alias userSP R1;

// Storing userSP
userSP = SP;

// Save the value of SP in the user SP field of the Process Table entry of the process.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5 * CORE + 1] * 16 + 13] = SP;

// Set the value of SP to the beginning of the kernel stack.
SP = ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5 * CORE + 1] * 16 + 11] * 512) - 1;

multipush(R1);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);

// Set the MODE FLAG field in the Process Table to the system call number, which is 21 for the Shutdown system call.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5 * CORE + 1] * 16 + 9] = 21;

alias pid R2;
pid = [SYSTEM_STATUS_TABLE + 5 * CORE + 1];

// If the current process is not the shell or the current user is not the root user, return -1 (Shell process has pid 2).
if (pid != 2 || [PROCESS_TABLE + (PT_ENTRY_SIZE * pid) + 3] != 1) then
    // Reset the MODE FLAG field in the Process Table to 0. Value 0 indicates that the process is running in user mode.
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5 * CORE + 1] * PT_ENTRY_SIZE) + 9] = 0;

    // Set -1 as the return value in the user stack. (Address Translation required)
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;

    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;

    // Switch to the user stack
    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5 * CORE + 1] * PT_ENTRY_SIZE) + 13];

    ireturn;
endif;

// Disable the second core
reset;

// Set SCHED_LOCK to 0
[SCHED_LOCK] = 0;

// Invoke the Kill All function of the Process Manager module.
multipush(R1, R2);
R1 = 5; // Kill All
R2 = pid; // pid
call MOD_1; // Process Manager module
multipop(R1, R2);

alias bufferNum R3;
bufferNum = 0;

alias bufferTableEntry R4;

while (bufferNum < MAX_BUFFER) do
    // For every valid entry, if the dirty bit is set, write back to disk
    bufferTableEntry = BUFFER_TABLE + (bufferNum * 4);
    if ([bufferTableEntry] != -1 && [bufferTableEntry + 1] == 1) then
        // Invoke the Disk Store function of the Device Manager module.
        multipush(R1, R2, R3, R4);
        R1 = 1; // Disk Store Function number
        R2 = pid;
        R3 = BUFFER_BASE + bufferNum;
        R4 = [bufferTableEntry];
        call MOD_4; // Device Manager
        multipop(R1, R2, R3, R4);
    endif;
    bufferNum = bufferNum + 1;
endwhile;

// Commit the changes made in the memory copies of the inode table (along with user table), the root file, and the disk free list by storing them back to the disk invoking the Disk Store function of the Device Manager module.

// First Page/Block of Inode + User Table
multipush(R1, R2, R3, R4);
R1 = 1; // Disk Store function number
R2 = pid; // Process ID
R3 = 59; // Page Number
R4 = 3; // Block Number
call MOD_4;
multipop(R1, R2, R3, R4);

// Second Page/Block of Inode + User Table
multipush(R1, R2, R3, R4);
R1 = 1; // Disk Store function number
R2 = pid; // Process ID
R3 = 60; // Page Number
R4 = 4; // Block Number
call MOD_4;
multipop(R1, R2, R3, R4);

// Root file
multipush(R1, R2, R3, R4);
R1 = 1; // Disk Store function number
R2 = pid; // Process ID
R3 = 62; // Page Number
R4 = 5; // Block Number
call MOD_4;
multipop(R1, R2, R3, R4);

// Disk Free List
multipush(R1, R2, R3, R4);
R1 = 1; // Disk Store function number
R2 = pid; // Process ID
R3 = 61; // Page Number
R4 = 2; // Block Number
call MOD_4;
multipop(R1, R2, R3, R4);

halt;
