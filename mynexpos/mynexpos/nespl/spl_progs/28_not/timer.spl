// Switch to kernel stack

// Save the current value of User SP into the corresponding Process Table entry
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5 * CORE + 1] * 16) + 13] = SP;

// Setting SP to UArea Page number * 512 - 1 (Kernel Stack)
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5 * CORE + 1] * 16) + 11] * 512 - 1;

// Save the user context to the kernel stack
backup;

// Stage 27

alias pagingStatus R1;
pagingStatus = [SYSTEM_STATUS_TABLE + 5];

alias pid R2;
pid = [SYSTEM_STATUS_TABLE + 5 * CORE + 1];

// If swapping is initiated
if (pagingStatus != 0 && CORE == PRIMARY_CORE) then

    // Call Swap In/Out, if necessary
    // Only Core 1 can execute SWAPPER_DAEMON
    if (pid == SWAPPER_DAEMON) then
        // Call the swap_out()/swap_in() function in the Pager Module.
        multipush(R1, R2);

        R1 = ACQUIRE_KERN_LOCK;
        call ACCESS_CONTROL;

        multipop(R1, R2);
        multipush(R1, R2);

        // R1 already contains function number
        // R2 already contains current pid
        call MOD_6; // Pager Module

        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;

        multipop(R1, R2);
    endif;

else
    // Swapping is not on now.  Check whether it must be initiated
    alias memFreeCount R3;
    memFreeCount = [SYSTEM_STATUS_TABLE + 2];

    if (memFreeCount < MEM_LOW) then
        // Swap Out to be invoked during the next Timer Interrupt
        // Set the Paging Status in System Status Table to SWAP_OUT.
        [SYSTEM_STATUS_TABLE + 5] = SWAP_OUT;
    else
        // If there are swapped out processes. Check SWAPPED_COUNT in System Status Table
        if ([SYSTEM_STATUS_TABLE + 4] > 0) then

            // If (Tick of any Swapped Out process > MAX_TICK or MEM_FREE_COUNT > MEM_HIGH)
            // Swap In to be invoked during the next Timer Interrupt
            // Set the Paging Status in System Status Table to SWAP_IN.
            if (memFreeCount > MEM_HIGH) then
                [SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
            else
                alias i R4;
                i = SHELL_PROCESS + 1;
                while (i < SWAPPER_DAEMON) do
                    alias process_table_entry R5;
                    process_table_entry = PROCESS_TABLE + (i * PT_ENTRY_SIZE);
                    if ([process_table_entry + 6] == 1 && [process_table_entry] > MAX_TICK) then
                        [SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
                        break;
                    endif;
                    i = i + 1;
                endwhile;
            endif;
        endif;
    endif;
endif;

// Change the state of the current process in its Process Table entry from RUNNING to READY.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5 * CORE + 1] * 16 + 4] = READY;

// cnt through the process table entries and increment the TICK field of each process.
alias cnt R0;
cnt = 0;
while (cnt <= 15) do
    [PROCESS_TABLE + cnt * 16] = [PROCESS_TABLE + cnt * 16] + 1;
    cnt = cnt + 1;
endwhile;

call MOD_5; // invoke  context switch module (Scheduler module)

// Restore the user context from the kernel stack
restore;

// Set SP to the user SP saved in Process Table before returning to user mode as it was in the running state before, so there is user context to be restored
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5 * CORE + 1] * 16) + 13];

// Set the MODE_FLAG in the process table entry to 0.
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5 * CORE + 1] * 16) + 9] = 0;

// Switch to user mode
ireturn;
